name: docker deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # 用于手动触发

env:
  REGISTRY: ghcr.io

  REGISTRY_DOMAIN: registry.cn-shanghai.aliyuncs.com
  REGISTRY_NAMESPACE: internal-projects

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          run_install: false

      - name: Get pnpm store
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-${{ env.cache-name }}-
            ${{ runner.os }}-pnpm-store-
            ${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install

      - name: Build app
        run: pnpm run build

      # - name: Login to ghcr
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Lowercase the repo name
      #   run: echo "IMAGE=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Login to acr
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOMAIN }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Lowercase the repo name
        run: |
          echo "IMAGE=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
          IMAGE_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV

      # ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
      - name: Build docker and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Lite.Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_DOMAIN }}/${{env.REGISTRY_NAMESPACE}}/${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Coolify
        run: |
          curl --request GET '${{ secrets.COOLIFY_WEBHOOK }}' --header  'Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}'
